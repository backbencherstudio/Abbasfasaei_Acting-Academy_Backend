generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  status       Int?      @default(1) @db.SmallInt
  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?
  about      String?

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  billing_id        String?
  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String?

  lastSeenAt       DateTime?
  actingGoalsId    String?
  experience_level ExperienceLevel?

  // Accounts & auth
  accounts Account[]

  // Community: authored and interactions
  authoredPosts        CommunityPost[]        @relation("authoredPosts")
  communityShares      CommunityShare[]
  communityLikes       CommunityLike[]
  communityComments    CommunityComment[]
  CommunityCommentLike CommunityCommentLike[]
  communityPoolVotes   CommunityPoolVote[]

  // Chat schema relations
  memberships      Membership[]
  messages         Message[]         @relation("MessageSender")
  deletedMessages  Message[]         @relation("MessageDeletedBy")
  blocksInitiated  Block[]           @relation("UserBlocks")
  blockedBy        Block[]           @relation("UserBlockedBy")
  receipts         Receipt[]
  reports          Report[]
  callParticipants CallParticipant[]

  // Direct message/notification relations
  receiver_messages      Message[]      @relation("receiver")
  sender_messages        Message[]      @relation("sender")
  receiver_notifications Notification[] @relation("receiver")
  sender_notifications   Notification[] @relation("sender")

  // Courses & enrollments
  Course     Course[]
  Enrollment Enrollment[]

  // Assignments & attendance
  AssignmentSubmission      AssignmentSubmission[]
  attendances               Attendance[]           @relation("UserAttendances")
  assignmentGradesAsStudent AssignmentGrade[]      @relation("AssignmentGradeStudent")
  assignmentGradesAsTeacher AssignmentGrade[]      @relation("AssignmentGradeTeacher")
  assignmentsAsTeacher      Assignment[]           @relation("AssignmentTeacher")

  // ActingGoals
  ActingGoals ActingGoals?

  // Events
  createdEvents    Event[]        @relation("EventCreator")
  eventMemberships EventMember[]
  eventPayments    EventPayment[]

  // Payments
  payment_histories PaymentHistory[]
  userPayments      UserPayment[]

  // Roles & settings
  role_users    RoleUser[]
  roles         Role[]
  user_settings UserSetting[]
  ucodes        Ucode[]

  // Conversations (creator/participant)
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  userReportsAsReporter     UserReport[]   @relation("Reporter")
  userReportsAsReported     UserReport[]   @relation("ReportedUser")

  createdQRSessions QRAttendanceSession[]

  @@map("users")
}

model Ucode {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  status     Int?      @default(1) @db.SmallInt
  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String? @unique // add this line

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id               String           @id @default(cuid())
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now())
  deleted_at       DateTime?
  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  role_id    String
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  deleted_at    DateTime?
  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id                    String             @id @default(cuid())
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now())
  deleted_at            DateTime?
  read_at               DateTime?
  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPayment {
  id                String           @id @default(cuid())
  enrollmentId      String           @unique
  payment_type      PaymentType?
  payment_status    PaymentStatus    @default(DUE)
  payment_method    String?
  account_holder    String?
  card_number       String?
  card_expiry       String?
  card_cvc          String?
  invoice_sent      Boolean?         @default(false)
  amount            Decimal?
  currency          String?          @default("USD")
  payment_date      DateTime?        @default(now())
  transaction_id    String?
  user_id           String
  enrollment        Enrollment       @relation(fields: [enrollmentId], references: [id])
  user              User             @relation(fields: [user_id], references: [id])
  payment_histories PaymentHistory[]

  @@map("enrollment_payments")
}

model PaymentHistory {
  id             String        @id @default(cuid())
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  deleted_at     DateTime?
  user_id        String
  description    String?
  userPaymentId  String?
  amount         Decimal?
  currency       String?       @default("USD")
  payment_date   DateTime?     @default(now())
  payment_status PaymentStatus @default(DUE)
  payment_type   PaymentType?
  transaction_id String?
  userPayment    UserPayment?  @relation(fields: [userPaymentId], references: [id])
  user           User          @relation(fields: [user_id], references: [id])

  @@map("payment_histories")
}

model Course {
  id                    String         @id @default(cuid())
  title                 String
  createdBy             String
  instructorId          String?
  fee                   Decimal
  duration              String
  start_date            DateTime
  created_at            DateTime       @default(now())
  course_overview       Json?
  course_module_details Json?
  installment_process   Json?
  status                CourseStatus   @default(ACTIVE)
  updated_at            DateTime       @default(now()) @updatedAt
  seat_capacity         String         @default("50")
  class_time            String?
  instructor            User?          @relation(fields: [instructorId], references: [id])
  modules               CourseModule[]
  enrollments           Enrollment[]
}

model CourseModule {
  id              String        @id @default(cuid())
  courseId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  module_name     String
  module_overview String?
  module_title    String
  course          Course        @relation(fields: [courseId], references: [id])
  classes         ModuleClass[]

  @@map("course_modules")
}

model ModuleClass {
  id             String       @id @default(cuid())
  moduleId       String
  class_title    String
  class_name     String?
  class_overview String?
  duration       String?
  start_date     DateTime?
  class_time     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assignments    Assignment[]
  attendances    Attendance[]
  classAssets    ClassAsset[]
  module         CourseModule @relation(fields: [moduleId], references: [id])

  qrSessions QRAttendanceSession[]

  @@map("module_classes")
}

model Assignment {
  id              String                 @id @default(cuid())
  title           String
  description     String?
  submission_Date DateTime
  due_date        DateTime
  total_marks     Int
  attachment_url  Json?
  average_score   Int?                   @default(0)
  createdAt       DateTime               @default(now())
  teacherId       String
  teacher         User                   @relation("AssignmentTeacher", fields: [teacherId], references: [id])
  moduleClassId   String
  moduleClass     ModuleClass            @relation(fields: [moduleClassId], references: [id])
  submissions     AssignmentSubmission[]
  grades          AssignmentGrade[]

  @@map("assignments")
}

model ClassAsset {
  id         String      @id @default(cuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  deleted_at DateTime?
  class_id   String
  asset_type AssetType
  asset_url  String
  class      ModuleClass @relation(fields: [class_id], references: [id], onDelete: Cascade)

  @@map("class_assets")
}

model Attendance {
  id            String           @id @default(cuid())
  created_at    DateTime         @default(now())
  updated_at    DateTime         @default(now())
  deleted_at    DateTime?
  class_id      String
  student_id    String
  attendance_by String?
  status        AttendanceStatus @default(ABSENT)
  attended_at   DateTime?
  class         ModuleClass      @relation(fields: [class_id], references: [id])
  student       User             @relation("UserAttendances", fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([class_id, student_id])
  @@map("attendances")
}

model QRAttendanceSession {
  id         String      @id @default(cuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  token      String      @unique
  class_id   String
  expires_at DateTime
  is_active  Boolean     @default(true)
  created_by String
  class      ModuleClass @relation(fields: [class_id], references: [id], onDelete: Cascade)
  creator    User        @relation(fields: [created_by], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([class_id])
  @@index([expires_at])
  @@index([is_active])
  @@map("qr_attendance_sessions")
}

model AssignmentSubmission {
  id          String   @id @default(cuid())
  title       String?
  description String?
  fileUrl     String?
  submittedAt DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  total_Submissions Int? @default(0)

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  studentId String
  student   User   @relation(fields: [studentId], references: [id])

  // One optional grade linked to this submission
  grade AssignmentGrade? @relation("SubmissionToGrade")

  @@map("assignment_submissions")
}

model AssignmentGrade {
  id           String   @id @default(cuid())
  assignmentId String
  studentId    String
  teacherId    String
  grade        String
  grade_number Int
  feedback     String?
  gradedBy     String?
  gradedAt     DateTime @default(now())

  total_graded Int? @default(0)

  assignment   Assignment            @relation(fields: [assignmentId], references: [id])
  // Relations to User: disambiguate with relation names
  student      User                  @relation("AssignmentGradeStudent", fields: [studentId], references: [id])
  teacher      User                  @relation("AssignmentGradeTeacher", fields: [teacherId], references: [id])
  // Link grade to the concrete submission via FK
  submissionId String?               @unique
  submission   AssignmentSubmission? @relation("SubmissionToGrade", fields: [submissionId], references: [id])

  @@unique([assignmentId, studentId])
  @@map("assignment_grades")
}

model Enrollment {
  id                String             @id @default(cuid())
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now())
  user_id           String
  full_name         String
  email             String
  phone             String
  address           String
  date_of_birth     DateTime?          @db.Date
  experience_level  ExperienceLevel
  courseId          String?
  courseModuleId    String?
  actingGoalsId     String?
  contract_docs     Json?
  status            EnrollmentStatus   @default(PENDING)
  payment_status    PaymentStatus      @default(DUE)
  payment_type      PaymentType?
  actingGoals       ActingGoals?
  payment           UserPayment?
  enrollmentProfile EnrollmentProfile?
  course            Course?            @relation(fields: [courseId], references: [id])
  user              User               @relation(fields: [user_id], references: [id])

  digital_contract_signing  DigitalContractSigning?
  rules_regulations_signing RulesAndRegulationsSigning?

  @@map("enrollments")
}

model DigitalContractSigning {
  id               String             @id @default(cuid())
  enrollmentId     String             @unique
  agreed           Boolean            @default(false)
  enrollment       Enrollment         @relation(fields: [enrollmentId], references: [id])
  digitalSignature DigitalSignature[]

  @@map("digital_contract_signings")
}

model RulesAndRegulationsSigning {
  id               String             @id @default(cuid())
  enrollmentId     String             @unique
  accepted         Boolean            @default(false)
  enrollment       Enrollment         @relation(fields: [enrollmentId], references: [id])
  digitalSignature DigitalSignature[]

  @@map("enrollment_terms_and_conditions")
}

model DigitalSignature {
  id                           String                      @id @default(cuid())
  enrollmentId                 String                      @unique
  full_name                    String
  signature                    String
  signed_at                    DateTime?                   @db.Date
  digital_contract_signing_id  String?
  digital_contract_signing     DigitalContractSigning?     @relation(fields: [digital_contract_signing_id], references: [id])
  rules_regulations_signing_id String?
  rules_regulations_signing    RulesAndRegulationsSigning? @relation(fields: [rules_regulations_signing_id], references: [id])

  @@map("digital_signatures")
}

model ActingGoals {
  id           String      @id @default(cuid())
  acting_goals String
  userId       String      @unique
  enrollmentId String?     @unique
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@map("acting_goals")
}

model EnrollmentProfile {
  id                String           @id @default(cuid())
  enrollmentId      String           @unique
  avatar            String?
  personal_info     Json?
  account_settings  Json?
  subscription      Json?
  contract_docs     Json?
  feedback          Json?
  push_notification Json?
  support           Json?
  address           String
  created_at        DateTime         @default(now())
  date_of_birth     DateTime?        @db.Date
  email             String
  enrollment_status EnrollmentStatus @default(PENDING)
  experience_level  ExperienceLevel
  full_name         String
  phone             String
  updated_at        DateTime         @default(now()) @updatedAt
  enrollment        Enrollment       @relation(fields: [enrollmentId], references: [id])

  @@map("enrollment_profiles")
}

//
//---------------------------------- Community & Social Models -----------------//
//

model CommunityPost {
  id         String             @id @default(cuid())
  author_Id  String
  content    String
  status     PostStatus         @default(REQUEST)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  media_Url  String?
  mediaType  MediaType?
  visibility PostVisibility     @default(PUBLIC)
  comments   CommunityComment[]
  likes      CommunityLike[]
  pool       CommunityPool?
  author     User               @relation("authoredPosts", fields: [author_Id], references: [id])
  shares     CommunityShare[]
}

model CommunityLike {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime      @default(now())
  avatar    String?
  name      String?
  username  String?
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model CommunityComment {
  id        String                 @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime               @default(now())
  avatar    String?
  name      String?
  username  String?
  parentId  String?
  parent    CommunityComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   CommunityComment[]     @relation("CommentReplies")
  post      CommunityPost          @relation(fields: [postId], references: [id])
  user      User                   @relation(fields: [userId], references: [id])
  likes     CommunityCommentLike[]
}

model CommunityCommentLike {
  id        String           @id @default(cuid())
  commentId String
  userId    String
  name      String?
  username  String?
  avatar    String?
  createdAt DateTime         @default(now())
  comment   CommunityComment @relation(fields: [commentId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

model CommunityShare {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime      @default(now())
  avatar    String?
  name      String?
  username  String?
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model CommunityPool {
  id       String              @id @default(cuid())
  postId   String              @unique
  question String
  options  Json
  avatar   String?
  name     String?
  username String?
  post     CommunityPost       @relation(fields: [postId], references: [id])
  votes    CommunityPoolVote[]
}

model CommunityPoolVote {
  id        String        @id @default(cuid())
  poolId    String
  userId    String
  option    String
  createdAt DateTime      @default(now())
  avatar    String?
  name      String?
  username  String?
  pool      CommunityPool @relation(fields: [poolId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model UserReport {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  reason         String
  description    String?
  createdAt      DateTime     @default(now())
  status         ReportStatus @default(OPEN)
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
}

enum PostStatus {
  APPROVED
  REQUEST
  REJECTED
  FLAGGED
  ANNOUNCEMENT
}

//
//---------------------------------- Chat Models -----------------//
//

model Conversation {
  id             String           @id @default(cuid())
  creator_id     String?
  participant_id String?
  avatarUrl      String?
  createdAt      DateTime         @default(now())
  createdBy      String?
  dmKey          String?          @unique
  title          String?
  type           ConversationType
  updatedAt      DateTime         @updatedAt
  receiverTitle  String?
  senderTitle    String?
  callSessions   CallSession[]
  memberships    Membership[]
  creator        User?            @relation("creator", fields: [creator_id], references: [id])
  participant    User?            @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Membership {
  id             String       @id @default(cuid())
  role           MemberRole   @default(MEMBER)
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?
  clearedAt      DateTime?
  mutedUntil     DateTime?
  archivedAt     DateTime?
  leftAt         DateTime?
  userId         String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  receiver_id    String?
  content        Json
  conversationId String
  createdAt      DateTime     @default(now())
  deletedAt      DateTime?
  deletedById    String?
  kind           MessageKind  @default(TEXT)
  senderId       String
  sender_user_id String?
  readAt         DateTime?
  media_Url      String?
  receipts       Receipt[]
  reports        Report[]
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deletedBy      User?        @relation("MessageDeletedBy", fields: [deletedById], references: [id])
  receiver       User?        @relation("receiver", fields: [receiver_id], references: [id])
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  sender_user    User?        @relation("sender", fields: [sender_user_id], references: [id])

  @@index([conversationId, createdAt])
  @@map("messages")
}

model Receipt {
  id        String        @id @default(cuid())
  status    ReceiptStatus
  at        DateTime      @default(now())
  messageId String
  userId    String
  message   Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Block {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  blockerId String
  blockedId String
  blocked   User     @relation("UserBlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Report {
  id         String       @id @default(cuid())
  messageId  String
  reporterId String
  reason     String
  status     ReportStatus @default(OPEN)
  createdAt  DateTime     @default(now())
  message    Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  reporter   User         @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model CallSession {
  id             String            @id @default(cuid())
  conversationId String
  kind           CallKind
  startedBy      String
  startedAt      DateTime          @default(now())
  endedAt        DateTime?
  participants   CallParticipant[]
  conversation   Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model CallParticipant {
  id       String      @id @default(cuid())
  callId   String
  userId   String
  joinedAt DateTime    @default(now())
  leftAt   DateTime?
  call     CallSession @relation(fields: [callId], references: [id], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([callId])
}

//
//---------------------------------- Event Models -----------------//
//

model Event {
  id          String         @id @default(cuid())
  created_at  DateTime       @default(now())
  updated_at  DateTime       @default(now())
  deleted_at  DateTime?
  name        String
  description String?
  overview    String?
  date        DateTime
  time        String?
  location    String
  amount      Decimal?
  status      EventStatus    @default(UPCOMING)
  files       Json?
  created_by  String
  members     EventMember[]
  payments    EventPayment[]
  creator     User           @relation("EventCreator", fields: [created_by], references: [id])

  @@map("events")
}

model EventMember {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  event_id   String
  user_id    String

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@map("event_members")
}

model EventPayment {
  id              String             @id @default(cuid())
  created_at      DateTime           @default(now())
  updated_at      DateTime           @default(now())
  event_id        String
  user_id         String
  amount          Decimal
  currency        String?            @default("USD")
  status          EventPaymentStatus @default(PENDING)
  transaction_id  String?
  payment_method  String?
  payment_date    DateTime?
  receipt_file    String?
  invoice_file    String?
  transaction_ref String?
  event           Event              @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user            User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@map("event_payments")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id           String    @id @default(cuid())
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id                  String    @id @default(cuid())
  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
  deleted_at          DateTime?
  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  deleted_at    DateTime?
  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  user_id    String?
  setting_id String?
  value      String?
  setting    Setting?  @relation(fields: [setting_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

enum CourseType {
  ONE_YEAR_ADULT
  TWO_YEAR_ADULT
  TWO_YEAR_KIDS
  FULL_PACKAGE_KIDS
  FULL_PACKAGE_ADULTS
}

enum CourseStatus {
  ACTIVE
  INACTIVE
}

enum AssetType {
  VIDEO
  PHOTO
  FILE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum PaymentType {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PAID
  DUE
  OVER_DUE
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  PENDING
  ALUMNI
  RESTRICTED
}

enum MediaType {
  PHOTO
  VIDEO
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

enum ReportStatus {
  OPEN
  REVIEWED
}

enum ConversationType {
  DM
  GROUP
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum MessageKind {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM
}

enum ReceiptStatus {
  DELIVERED
  READ
}

enum CallKind {
  AUDIO
  VIDEO
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum EventPaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
