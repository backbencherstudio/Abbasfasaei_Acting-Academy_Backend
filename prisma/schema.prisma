generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ---------------------- AUTH + CORE ----------------------
//
model Account {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?
  about      String?

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  billing_id        String?
  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String?

  // Existing relations
  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  experience_level     ExperienceLevel?
  payment_transactions PaymentTransaction[]
  UserProfile          UserProfile[]
  teacherProfile       TeacherProfile[]

  // Community post relation
  authoredPosts     CommunityPost[]    @relation("authoredPosts")
  communityShares   CommunityShare[]
  communityLikes    CommunityLike[]
  communityComments CommunityComment[]

  // CommunityPoolVote relation
  communityPoolVotes CommunityPoolVote[]

  // Chat schema relations
  memberships      Membership[]
  messages         Message[]         @relation("MessageSender")
  deletedMessages  Message[]         @relation("MessageDeletedBy")
  blocksInitiated  Block[]           @relation("UserBlocks")
  blockedBy        Block[]           @relation("UserBlockedBy")
  receipts         Receipt[]
  reports          Report[]
  callParticipants CallParticipant[]

  // UserReport relations
  reportedUsers UserReport[] @relation("ReportedUser")
  reportsMade   UserReport[] @relation("Reporter")

  role UserRole @default(STUDENT)

  lastSeenAt           DateTime?
  CommunityCommentLike CommunityCommentLike[]
  Course               Course[]
  Enrollment           Enrollment[]
  AssignmentSubmission AssignmentSubmission[]
  ActingGoals          ActingGoals?
  actingGoalsId        String?

  @@map("users")
}

//
// ---------------------- ROLES & PERMISSIONS ----------------------
//
model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  title      String?
  action     String?
  subject    String?
  conditions String?
  fields     String?

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}


//
//---------------------TEACHERS & INSTRUCTORS ---------------------
//  
model TeacherProfile {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  teacher_name  String?
  email         String?
  phone_number  String?
  bio          String?
  qualifications String?
  experience   String?
  specialties  String?
  availability String?

  @@map("teacher_profiles")
}

//
// ---------------------- NOTIFICATIONS ----------------------
//
model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  read_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?

  @@map("notifications")
}

//
// ---------------------- PAYMENTS ----------------------
//
model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  store_id String?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  order_id         String?
  type             String?  @default("order")
  withdraw_via     String?  @default("wallet")
  provider         String?
  reference_number String?
  status           String?  @default("pending") 
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

//
// ----------------COURSES ----------------------
//
model Course {
  id              String     @id @default(cuid())
  title           String // e.g., "1-Year Adult Program"
  description     String? // Course overview
  duration        Int // Duration in weeks or months
  type            CourseType
  fee             Decimal // e.g., 1200.00
  installmentPlan Json? // Details about monthly installments
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  instructorId String?
  instructor   User?   @relation(fields: [instructorId], references: [id])

  modules     CourseModule[] // Course modules
  enrollments Enrollment[] // Students enrolled

  @@map("courses")
}

enum CourseType {
  ONE_YEAR_ADULT
  TWO_YEAR_ADULT
  TWO_YEAR_KIDS
  FULL_PACKAGE_ADULTS
  FULL_PACKAGE_KIDS
}

model CourseModule {
  id          String         @id @default(cuid())
  course      Course         @relation(fields: [courseId], references: [id])
  courseId    String
  title       String // Module name
  description String? // optional module description
  lessons     CourseLesson[] // Each module can have multiple lessons/classes
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("course_modules")
}

model CourseLesson {
  id          String       @id @default(cuid())
  module      CourseModule @relation(fields: [moduleId], references: [id])
  moduleId    String
  title       String // Class name
  description String? // Class overview
  scheduledAt DateTime? // class timing
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  assets         LessonAsset[]
  assignments    Assignment[]
  lessonProgress LessonProgress[]

  @@map("course_lessons")
}

model LessonAsset {
  id        String       @id @default(cuid())
  lesson    CourseLesson @relation(fields: [lessonId], references: [id])
  lessonId  String
  type      AssetType // VIDEO / PDF
  url       String // storage path
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("lesson_assets")
}

enum AssetType {
  VIDEO
  PDF
}

model Assignment {
  id          String       @id @default(cuid())
  lesson      CourseLesson @relation(fields: [lessonId], references: [id])
  lessonId    String
  title       String
  description String?
  dueDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  fileUrl      String
  submittedAt  DateTime   @default(now())
  grade        String? // optional grade/score

  @@map("assignment_submissions")
}

model LessonProgress {
  id           String       @id @default(cuid())
  enrollment   Enrollment   @relation(fields: [enrollmentId], references: [id])
  enrollmentId String
  lesson       CourseLesson @relation(fields: [lessonId], references: [id])
  lessonId     String
  completed    Boolean      @default(false)
  completedAt  DateTime?

  @@map("lesson_progress")
}

//
// ---------------------- ENROLLMENT ----------------------
//
model Enrollment {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  course_type CourseType

  full_name        String
  email            String
  phone            String
  address          String
  date_of_birth    DateTime?       @db.Date
  experience_level ExperienceLevel

  digital_signature DigitalSignature?

  payment        EnrollmentPayment?
  course         Course?            @relation(fields: [courseId], references: [id])
  courseId       String?
  courseModuleId String?

  enrollmentProfile EnrollmentProfile?
  lessonProgress    LessonProgress[]

  contractTerms                EnrollmentContractTerms?
  enrollmentTermsAndConditions EnrollmentTermsAndConditions?

  actingGoals   ActingGoals?
  actingGoalsId String?

  @@map("enrollments")
}

model EnrollmentContractTerms {
  id           String     @id @default(cuid())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String     @unique
  agreed       Boolean    @default(false)

  @@map("enrollment_contract_terms")
}

model EnrollmentTermsAndConditions {
  id           String     @id @default(cuid())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String     @unique
  accepted     Boolean    @default(false)

  @@map("enrollment_terms_and_conditions")
}

model DigitalSignature {
  id           String     @id @default(cuid())
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String     @unique
  full_name    String
  signature    String
  signed_at    DateTime?  @db.Date

  @@map("digital_signatures")
}

model EnrollmentPayment {
  id             String        @id @default(cuid())
  enrollment     Enrollment    @relation(fields: [enrollmentId], references: [id])
  enrollmentId   String        @unique
  payment_type   PaymentType
  payment_status PaymentStatus @default(PENDING)
  payment_method String
  account_holder String?
  card_number    String?
  card_expiry    String?
  card_cvc       String?
  invoice_sent   Boolean       @default(false)

  @@map("enrollment_payments")
}

model ActingGoals {
  id           String      @id @default(cuid())
  acting_goals String
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id])
  enrollmentId String?     @unique
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])

  @@map("acting_goals")
}

enum PaymentType {
  ONE_TIME
  MONTHLY_INSTALLMENTS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model EnrollmentProfile {
  id                String      @id @default(cuid())
  enrollment        Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId      String     @unique
  avatar            String?
  personal_info     Json?
  account_settings  Json?
  subscription      Json?
  contract_docs     Json?
  feedback          Json?
  push_notification Json?
  support           Json?

  @@map("enrollment_profiles")
}

//
//--------------------- Community ---------------------
//

model CommunityPost {
  id         String             @id @default(cuid())
  author_Id  String
  author     User               @relation("authoredPosts", fields: [author_Id], references: [id])
  content    String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  media_Url  String? // photo or video
  mediaType  MediaType?
  visibility PostVisibility     @default(PUBLIC)
  likes      CommunityLike[]
  comments   CommunityComment[]
  shares     CommunityShare[]
  pool       CommunityPool?
}

model CommunityLike {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  name      String?
  username  String?
  avatar    String?
  createdAt DateTime      @default(now())
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

model CommunityComment {
  id        String                 @id @default(cuid())
  postId    String
  userId    String
  name      String?
  username  String?
  avatar    String?
  content   String
  createdAt DateTime               @default(now())
  parentId  String?
  post      CommunityPost          @relation(fields: [postId], references: [id])
  user      User                   @relation(fields: [userId], references: [id])
  replies   CommunityComment[]     @relation("CommentReplies")
  parent    CommunityComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  likes     CommunityCommentLike[]
}

model CommunityCommentLike {
  id        String           @id @default(cuid())
  commentId String
  userId    String
  name      String?
  username  String?
  avatar    String?
  createdAt DateTime         @default(now())
  comment   CommunityComment @relation(fields: [commentId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

model CommunityShare {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  name      String?
  username  String?
  avatar    String?
  post      CommunityPost @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
}

model CommunityPool {
  id       String              @id @default(cuid())
  postId   String              @unique
  question String
  name     String?
  username String?
  avatar   String?
  options  Json // array of options
  votes    CommunityPoolVote[]

  post CommunityPost @relation(fields: [postId], references: [id])
}

model CommunityPoolVote {
  id        String        @id @default(cuid())
  poolId    String
  userId    String
  name      String?
  username  String?
  avatar    String?
  option    String
  pool      CommunityPool @relation(fields: [poolId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
}

model UserReport {
  id             String       @id @default(cuid())
  reporterId     String
  reportedUserId String
  reason         String
  description    String?
  createdAt      DateTime     @default(now())
  status         ReportStatus @default(OPEN)
  reporter       User         @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser   User         @relation("ReportedUser", fields: [reportedUserId], references: [id])
}

enum MediaType {
  PHOTO
  VIDEO
}

enum PostVisibility {
  PUBLIC
  PRIVATE
  FRIENDS
}

//
// ---------------------- CHAT (MERGED) ----------------------
//
model Conversation {
  id            String           @id @default(cuid())
  type          ConversationType
  title         String?
  senderTitle   String?
  receiverTitle String?
  avatarUrl     String?
  dmKey         String?          @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  createdBy     String?

  memberships  Membership[]
  messages     Message[]
  callSessions CallSession[]

  creator_id     String?
  creator        User?   @relation("creator", fields: [creator_id], references: [id])
  participant_id String?
  participant    User?   @relation("participant", fields: [participant_id], references: [id])

  @@map("conversations")
}

model Membership {
  id         String     @id @default(cuid())
  role       MemberRole @default(MEMBER)
  joinedAt   DateTime   @default(now())
  lastReadAt DateTime?
  clearedAt  DateTime?
  mutedUntil DateTime?
  archivedAt DateTime?
  leftAt     DateTime?

  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([conversationId, userId])
}

model Message {
  id        String      @id @default(cuid())
  kind      MessageKind @default(TEXT)
  content   Json
  createdAt DateTime    @default(now())

  senderId       String
  conversationId String

  media_Url String?

  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Add receiver and sender relations for User model
  receiver_id    String?
  receiver       User?     @relation("receiver", fields: [receiver_id], references: [id])
  sender_user_id String?
  sender_user    User?     @relation("sender", fields: [sender_user_id], references: [id])
  readAt         DateTime?

  receipts Receipt[]

  deletedAt   DateTime?
  deletedById String?
  deletedBy   User?     @relation("MessageDeletedBy", fields: [deletedById], references: [id])
  reports     Report[]

  @@index([conversationId, createdAt])
  @@map("messages")
}

model Receipt {
  id     String        @id @default(cuid())
  status ReceiptStatus
  at     DateTime      @default(now())

  messageId String
  userId    String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Block {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  blockerId String
  blockedId String
  blocker   User   @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User   @relation("UserBlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Report {
  id         String       @id @default(cuid())
  messageId  String
  reporterId String
  reason     String
  status     ReportStatus @default(OPEN)
  createdAt  DateTime     @default(now())

  message  Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  reporter User    @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model CallSession {
  id             String    @id @default(cuid())
  conversationId String
  kind           CallKind
  startedBy      String
  startedAt      DateTime  @default(now())
  endedAt        DateTime?

  conversation Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  participants CallParticipant[]
}

model CallParticipant {
  id       String    @id @default(cuid())
  callId   String
  userId   String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  call CallSession @relation(fields: [callId], references: [id], onDelete: Cascade)
  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([callId])
}

//
// ---------------------- ENUMS ----------------------
//
enum ReportStatus {
  OPEN
  REVIEWED
}

enum ConversationType {
  DM
  GROUP
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum MessageKind {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
  SYSTEM
}

enum ReceiptStatus {
  DELIVERED
  READ
}

enum CallKind {
  AUDIO
  VIDEO
}

//
// ---------------------- WEBSITE SETTINGS ----------------------
//
model UserProfile {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  membership_status MembershipStatus @default(PENDING)

  avatar            String?
  name              String
  personal_info     Json?
  account_settings  Json?
  subscription      Json?
  contract_docs     Json?
  feedback          Json?
  push_notification Json?
  support           Json?

  @@map("user_profiles")
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}
